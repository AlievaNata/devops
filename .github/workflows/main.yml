name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install flake8 pytest || true

      - name: Run lint and tests (non-blocking)
        run: |
          flake8 . || true
          pytest || true
        if: always()

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi_demo:latest

  deploy-to-vm:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add VM to known hosts
        run: ssh-keyscan -H ${{ secrets.DEPLOY_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VM
        env:
          SSH_USER: ${{ secrets.DEPLOY_VM_USER }}
          SSH_HOST: ${{ secrets.DEPLOY_VM_HOST }}
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi_demo:latest
        run: |
          ssh "${SSH_USER}@${SSH_HOST}" << 'EOF'
          set -e
          docker pull ${IMAGE}
          docker stop fastapi_demo || true
          docker rm fastapi_demo || true
          docker run -d --name fastapi_demo -p 8081:8000 ${IMAGE}
          EOF

